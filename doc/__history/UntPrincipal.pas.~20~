unit UntPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.ExtCtrls, Vcl.StdCtrls,
  Vcl.Grids, Vcl.Buttons, Vcl.Mask, Vcl.WinXCalendars, Vcl.Menus;

type
  TForm1 = class(TForm)
    PageControl1: TPageControl;
    TS_Agenda: TTabSheet;
    StringGrid1: TStringGrid;
    Memo1: TMemo;
    BBtn_Cad: TBitBtn;
    BBtn_Editar: TBitBtn;
    BBtn_Del: TBitBtn;
    TS_Cadastro: TTabSheet;
    MaskEdit1: TMaskEdit;
    Label1: TLabel;
    LabeledEdit1: TLabeledEdit;
    LabeledEdit2: TLabeledEdit;
    LabeledEdit3: TLabeledEdit;
    Label2: TLabel;
    Memo2: TMemo;
    Label3: TLabel;
    BitBtn1: TBitBtn;
    Label4: TLabel;
    MaskEdit2: TMaskEdit;
    CalendarPicker1: TCalendarPicker;
    Label5: TLabel;
    ComboBox2: TComboBox;
    ComboBox3: TComboBox;
    Label6: TLabel;
    Label7: TLabel;
    MaskEdit3: TMaskEdit;
    Label8: TLabel;
    RadioGroup1: TRadioGroup;
    GB_Filtros: TGroupBox;
    LabeledEdit4: TLabeledEdit;
    TrackBar1: TTrackBar;
    RadioGroup2: TRadioGroup;
    MaskEdit4: TMaskEdit;
    MaskEdit5: TMaskEdit;
    ComboBox1: TComboBox;
    ComboBox4: TComboBox;
    LabeledEdit5: TLabeledEdit;
    Button1: TButton;
    CheckBox1: TCheckBox;
    CheckBox2: TCheckBox;
    CheckBox3: TCheckBox;
    CheckBox4: TCheckBox;
    CheckBox5: TCheckBox;
    CheckBox6: TCheckBox;
    CheckBox7: TCheckBox;
    CheckBox8: TCheckBox;
    Label9: TLabel;
    CheckBox9: TCheckBox;
    MainMenu1: TMainMenu;
    Opces1: TMenuItem;
    Voltar1: TMenuItem;
    Limpar1: TMenuItem;
    Filtrar1: TMenuItem;
    Label10: TLabel;
    Label11: TLabel;
    TrackBar2: TTrackBar;
    Memo3: TMemo;
    procedure TS_AgendaShow(Sender: TObject);
    procedure StringGrid1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);

    //
    function Verifica_Pos(): Integer;
    function Num_Contatos(): Integer;
    function Idade (Data: TDate): Real;
    function Ver_Nome (Nome: string): Boolean;
    function Formata_Nome (Nome: string): string;
    //
    procedure Atualiza_Lista();
    procedure Editar_Contatos(Index: Integer);
    procedure Salvar(x: Integer);
    procedure Limpar ();
    //

    procedure BBtn_CadClick(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Button1Click(Sender: TObject);
    procedure BBtn_EditarClick(Sender: TObject);
    procedure BBtn_DelClick(Sender: TObject);
    procedure BitBtn2Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Voltar1Click(Sender: TObject);
    procedure Limpar1Click(Sender: TObject);
    procedure TS_CadastroShow(Sender: TObject);
    procedure TrackBar1Change(Sender: TObject);
    procedure Filtrar1Click(Sender: TObject);

    // FILTROS
    procedure Filtrar ();
    procedure F_Nome (Nome: string);
    procedure F_Idade (Idade1, Idade2: Integer);
    procedure F_Sexo (Sexo: string);
    procedure F_DDD (DDD: Integer);
    procedure F_CEP (CEP: string);
    procedure F_E_Civil (EC: string);
    procedure F_Relacionamento (Relacionamento: string);
    procedure F_Organização (Organização: string);
    //

    procedure TrackBar2Change(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

  type
    Contato = record

      Nome: string [50];
      Data_Nascimento: TDate;
      Idade: Real;
      Sexo: string[10];
      Celular: string[14];
      Fixo: string [13];
      CEP: string[9];
      Estado_Civil: string [20];
      Relacionamento: string [10];
      E_Mail: string [25];
      Organização: string[20];
      Notas: string [200];

      Status: Boolean;

    end;
var
  Form1: TForm1;

  Contatos: array[0..999] of Contato;
  Filtrados: array[0..999] of string;

  Arquivo: file of Contato;


implementation

{$R *.dfm}

procedure TForm1.Atualiza_Lista;
var
  i: Integer;
  x: Integer;
begin
  x:= 1;

  StringGrid1.RowCount:= 0;

  for i := 0 to 99 do
  begin

    if Contatos[i].Status = True then
    begin

      StringGrid1.RowCount:= StringGrid1.RowCount+1;

      StringGrid1.Cells[0,x]:= Contatos[i].Nome;
      StringGrid1.Cells[1,x]:= Contatos[i].Celular;

      Inc(x)

    end;


  end;

end;

procedure TForm1.BBtn_CadClick(Sender: TObject);
begin
  BitBtn1.Caption:= 'Salvar';

  TS_Cadastro.Show;
  Limpar();
end;

procedure TForm1.BBtn_DelClick(Sender: TObject);
begin

  if MessageDlg('Quer mesmo apagar este contato?',mtWarning,mbYesNo,0) = mrYes then
  begin

    Contatos[StringGrid1.Row-1].Status:= False;
    Atualiza_Lista();

    ShowMessage('contato apagado com sucesso');
  end;

end;

procedure TForm1.BBtn_EditarClick(Sender: TObject);
begin
  BitBtn1.Caption:= 'Editar';

  TS_Cadastro.Show;

  Editar_Contatos(StringGrid1.Row);
end;

procedure TForm1.BitBtn1Click(Sender: TObject);
var
  x: Integer;
  Nome: string;
begin
  if BitBtn1.Caption = 'Salvar' then
  begin
    Nome:= Formata_Nome(LabeledEdit1.Text);

    if Ver_Nome(Nome) = True then
    begin
      Salvar(Num_Contatos+1)
    end
      else
        ShowMessage('este nome já existe, por favor escolha outro');

  end
  else
    Salvar(StringGrid1.Row-1);

end;

procedure TForm1.BitBtn2Click(Sender: TObject);
begin
 Limpar();
end;

procedure TForm1.Button1Click(Sender: TObject);
var
  i: Integer;
begin
  if CheckBox1.Checked = True then
    F_Nome(LabeledEdit4.Text);

  Filtrar();

  //ShowMessage('termineiooo');

  //StringGrid1.RowCount:= 1;
  Memo3.Clear         ;

  for i := 0 to 99 do
  begin

    if not(Filtrados[i] = '') then
    begin

     // StringGrid1.RowCount:= StringGrid1.RowCount +1;


       Memo3.Lines.Add( Contatos[i].Nome);
        Memo3.Lines.Add(Contatos[i].Celular);

    end;

  end;

end;

procedure TForm1.Button2Click(Sender: TObject);
begin
  ShowMessage(Formata_Nome(LabeledEdit1.Text));
end;

procedure TForm1.Editar_Contatos(Index: Integer);
var
  x: Integer;
  i: Integer;
begin
  x:= Index-1;

  LabeledEdit1.Text:= Contatos[x].Nome;
  MaskEdit1.Text:= Contatos[x].Celular;
  MaskEdit2.Text:= Contatos[x].Fixo;

  for i := 0 to 3 do
  begin

    if ComboBox2.Items[i] = Contatos[x].Relacionamento then
      ComboBox2.ItemIndex:= i;

  end;


  LabeledEdit2.Text:= Contatos[x].Organização;
  LabeledEdit3.Text:= Contatos[x].E_Mail;

  if Contatos[x].Sexo = 'Masculino' then
    RadioGroup1.ItemIndex:= 0
  else
    RadioGroup1.ItemIndex:= 1;



  CalendarPicker1.Date:= Contatos[x].Data_Nascimento;
  MaskEdit3.Text:= Contatos[x].CEP;

  for i := 0 to 4 do
  begin

    if ComboBox3.Items[i] = Contatos[x].Estado_Civil then
      ComboBox3.ItemIndex:= i

  end;

  Memo2.Text:= Contatos[x].Notas;

end;

procedure TForm1.Filtrar;
var
  i: Integer;
  txt: string;
begin
  for i := 0 to 99 do
  begin

    Filtrados[i]:= Contatos[i].Nome;

    Memo3.Lines.Add(FIltrados[i])
  end;

  if CheckBox2.Checked = True then
    F_Idade(TrackBar1.Position,TrackBar2.Position);          //OK


  if CheckBox3.Checked = True then
    F_Sexo(RadioGroup2.Items[RadioGroup2.ItemIndex]);     //OK



  txt:='';
  if CheckBox5.Checked = True then
  begin
    txt:= txt + MaskEdit4.Text[2];                              //OK
    txt:= txt + MaskEdit4.Text[3];

    F_DDD(StrToInt(txt));

  end;

  if CheckBox6.Checked = True then
    F_CEP(MaskEdit5.Text);                                     //OK


  if CheckBox8.Checked = True then
    F_E_Civil(ComboBox1.Items[ComboBox1.ItemIndex]);


  if CheckBox7.Checked = True then
    F_Relacionamento(ComboBox4.Items[ComboBox4.ItemIndex]);        //OK


  {if CheckBox7.Checked = True then
  begin
    F_Organização(LabeledEdit5.Text);

  end;}

 // ShowMessage('opa');
end;

procedure TForm1.Filtrar1Click(Sender: TObject);
begin
  GB_Filtros.Show;
  Label10.Caption:= IntToStr(TrackBar1.Position);
  Label11.Caption:= IntToStr(TrackBar2.Position);
end;

function TForm1.Formata_Nome(Nome: string): string;
var
  txt: string;
  i: Integer;
begin
  txt:= UpperCase(Nome[1]);

  i:= 2;
  while i <= length(Nome) do
  begin

    if Nome[i] = ' ' then
    begin

      txt:= txt + Nome[i];
      Inc(i);
      txt:= txt + UpperCase(Nome[i]);
      Inc(i);

    end
      else
    begin

      txt:= txt + LowerCase(Nome[i]);
      Inc(i)

    end;
  end;

  Result:= txt;

end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
var
  i: Integer;
begin

  Rewrite(Arquivo);                                                             //apaga o arquivo

  for i := 0 to 99 do
  begin

    if Contatos[i].Status = True then
      Write(Arquivo, Contatos[i]);                                              //reescreve (salva) o arquivo

  end;

  CloseFile(Arquivo);

end;

procedure TForm1.FormCreate(Sender: TObject);                                   //criar o programa
var
  i: Integer;
begin

  for i := 0 to 99 do                                                           //zera a agenda
  begin

    Contatos[i].Status:= False;

  end;


  AssignFile(Arquivo, 'AgendaGui.Dat');                                         //vincula a variavel ao arquivo lido

  if FileExists ('AgendaGui.Dat') then                                          //verifica se o arquivo existe
    Reset(Arquivo)
  else
    Rewrite(Arquivo);

  Seek(Arquivo,0);                                                              //posiciona ponteiro no inicio do arquivo

  i:=0;
  while not(EOF(Arquivo)) do                                                    //até encontrar o fim do registro
  begin

    Read(Arquivo, Contatos[i]);                                                 //lê o arquivo

    Inc(i);

  end;


end;

procedure TForm1.F_CEP(CEP: string);
var
  i: Integer;
begin
  for i := 0 to 99 do
  begin

    if not(CEP = Contatos[i].CEP) then
    begin

      Filtrados[i]:= '';

    end;

  end;
end;

procedure TForm1.F_DDD(DDD: Integer);
var
  DDD_F, DDD_C: Integer;
  i: Integer;
begin

  for i := 0 to 99 do
  begin

    if not(Filtrados[i] = '') then
    begin

      DDD_F:= StrToInt(Contatos[i].Fixo[2]+Contatos[i].Fixo[3]);
      DDD_C:= StrToInt(Contatos[i].Celular[2]+Contatos[i].Celular[3]);

      if not((DDD = DDD_F) or (DDD = DDD_C)) then
      begin

        Filtrados[i]:= '';

      end;

    end;

  end;

end;

procedure TForm1.F_E_Civil(EC: string);
var
  i: Integer;
begin
  for i := 0 to 99 do
  begin

    if not(EC = Contatos[i].Estado_Civil) then
    begin

      Filtrados[i]:= '';

    end;

  end;
end;

procedure TForm1.F_Idade(Idade1, Idade2: Integer);
var
  i: Integer;
begin

  //ShowMessage('min: '+IntToStr(Idade1));
  //ShowMessage('max: '+IntToStr(Idade2));

  for i := 0 to 99 do
  begin

    if ((Contatos[i].Idade > Idade2) or (Contatos[i].Idade < Idade1)) and not(Filtrados[i]='') then
    begin

      //ShowMessage('fora '+Filtrados[i]);

      Filtrados[i]:= '';

    end;

  end;

end;

procedure TForm1.F_Nome(Nome: string);
var
  i: Integer;
  Teste: Boolean;
begin
  Teste:= False;

  for i := 0 to 99 do
  begin

    if Nome = Contatos[i].Nome then
    begin

      StringGrid1.RowCount:= 2;
      StringGrid1.Cells[0,1]:= Contatos[i].Nome;
      StringGrid1.Cells[1,1]:= Contatos[i].Celular;

      Teste:= True
    end;

  end;

  if Teste = False then
    ShowMessage('nenhum contato encontrado');

end;

procedure TForm1.F_Organização(Organização: string);
var
  i: Integer;
begin
  for i := 0 to 99 do
  begin

    if Organização = Contatos[i].Organização then
    begin

      Filtrados[i]:= '';

    end;

  end;
end;

procedure TForm1.F_Relacionamento(Relacionamento: string);
var
  i: Integer;
begin
  for i := 0 to 99 do
  begin

    if not(Relacionamento = Contatos[i].Relacionamento)then
    begin

      Filtrados[i]:= '';

    end;

  end;
end;

procedure TForm1.F_Sexo(Sexo: string);
var
  i: Integer;
begin
  //ShowMessage(Sexo);

  for i := 0 to 99 do
  begin

    if not(Contatos[i].Sexo = Sexo) and not(Filtrados[i]='') then
    begin

      //ShowMessage('fora '+Filtrados[i]);

      Filtrados[i]:= '';

    end;

  end;

end;

function TForm1.Idade(Data: TDate): Real;
var
  myYear: Word;
	myMonth: Word;
  myDay: Word;

  AuxYear: Word;
	AuxMonth: Word;
  AuxDay: Word;

  Aux: Tdate;

  X: real;

  Vet: array[0..2] of real;

  i: Integer;
begin
  DecodeDate(data, myYear, myMonth, myDay);

  Aux:= now;
  DecodeDate(Aux, AuxYear, AuxMonth,AuxDay);

  X:= myYear - AuxYear;
  Vet[0]:= X;
  X:= myMonth - AuxMonth;
  Vet[1]:= X;
  X:= myDay- AuxDay;
  Vet[2]:= X;


  if (Vet[1] < 1) then
  begin

      x:= Vet[0];

  end
    else
  begin

    if (Vet[1] = 0) and (Vet[2] < 1) then
    begin

      x:= Vet[0];

    end
      else
        x:= Vet[0]+1;

  end;

  Result:= Abs(X);

end;

procedure TForm1.Limpar;
begin
  LabeledEdit1.Clear;
  MaskEdit1.Clear;
  MaskEdit2.Clear;
  ComboBox2.ItemIndex:= 0;
  LabeledEdit2.Clear;
  LabeledEdit3.Clear;
  RadioGroup1.ItemIndex:= 0;
  CalendarPicker1.Date:= Now;
  MaskEdit3.Clear;
  ComboBox3.ItemIndex:= 0;
  Memo2.Clear;
  Memo2.Lines.Add('No-Notes');
end;

procedure TForm1.Limpar1Click(Sender: TObject);
begin
  Limpar();
end;

function TForm1.Num_Contatos: Integer;
var
  i: Integer;
  Aux: Integer;
begin
  Aux:= 0;

  for i := 0 to 99 do
  begin

    if Contatos[i].Status = True then
      Inc(Aux)

  end;

  Result:= Aux-1;
end;

procedure TForm1.Salvar(x: Integer);
begin
  Contatos[x].Nome:= Formata_Nome(LabeledEdit1.Text);
  Contatos[x].Celular:= MaskEdit1.Text;
  Contatos[x].Fixo:= MaskEdit2.Text;
  Contatos[x].Relacionamento:= ComboBox2.Items[ComboBox2.ItemIndex];
  Contatos[x].Organização:= LabeledEdit2.Text;
  Contatos[x].E_Mail:= LabeledEdit3.Text;
  Contatos[x].Sexo:= RadioGroup1.Items[RadioGroup1.ItemIndex];
  Contatos[x].Data_Nascimento:= CalendarPicker1.Date;
  Contatos[x].Idade:= Idade(CalendarPicker1.Date);
  Contatos[x].CEP:= MaskEdit3.Text;
  Contatos[x].Estado_Civil:= ComboBox3.Items[ComboBox3.ItemIndex];
  Contatos[x].Notas:= Memo2.Text;

  Contatos[x].Status:= True;

  TS_Agenda.Show;
end;

procedure TForm1.StringGrid1Click(Sender: TObject);
var
  Aux1: string;
  i: Integer;
  Aux2: Integer;
begin

  if not(StringGrid1.Row = 0) then
  begin

    Aux1:= StringGrid1.Cells[1,StringGrid1.Row];

    for i := 0 to 99 do
    begin

      if Aux1 = Contatos[i].Celular then
        Aux2:= i;

    end;

    Memo1.Clear;
    Memo1.Lines.Add(Contatos[Aux2].Nome);                                       //nome

    Memo1.Lines.Add('');

    Memo1.Lines.Add('Celular: '+Contatos[Aux2].Celular);

    Memo1.Lines.Add('Fixo:'+Contatos[Aux2].Fixo);

    Memo1.Lines.Add('');

    Memo1.Lines.Add('Relacionamento: '+(Contatos[Aux2].Relacionamento));

    Memo1.Lines.Add('');

    Memo1.Lines.Add('Organização: '+Contatos[Aux2].Organização);

    Memo1.Lines.Add('E-Mail: '+Contatos[Aux2].E_Mail);

    Memo1.Lines.Add('');

    Memo1.Lines.Add('Informações Pessoais');
    Memo1.Lines.Add('Idade: '+FloatToStr(Contatos[Aux2].Idade));
    Memo1.Lines.Add('Data de Nascimento: '+DateToStr(Contatos[Aux2].Data_Nascimento));
    Memo1.Lines.Add('Sexo: '+(Contatos[Aux2].Sexo));
    Memo1.Lines.Add('Estado Civil: '+(Contatos[Aux2].Estado_Civil));
    Memo1.Lines.Add('CEP: '+Contatos[Aux2].CEP);

    Memo1.Lines.Add('');

    Memo1.Lines.Add('Notas:');
    Memo1.Lines.Add(Contatos[Aux2].Notas);

    BBtn_Editar.Enabled:= True;
    BBtn_Del.Enabled:= True;

  end
    else
      Memo1.Clear

end;

procedure TForm1.TrackBar1Change(Sender: TObject);
begin
 Label10.Caption:= IntToStr(TrackBar1.Position);
end;

procedure TForm1.TrackBar2Change(Sender: TObject);
begin
  Label11.Caption:= IntToStr(TrackBar2.Position);
end;

procedure TForm1.TS_AgendaShow(Sender: TObject);
begin
  StringGrid1.Cells[0,0]:= 'Nome';
  StringGrid1.Cells[1,0]:= 'Celular';

  Atualiza_Lista();

  Memo1.Clear;
  BBtn_Editar.Enabled:= False;
  BBtn_Del.Enabled:= False;

  MainMenu1.Items[0].Visible:= False;
  MainMenu1.Items[1].Visible:= True;
end;

procedure TForm1.TS_CadastroShow(Sender: TObject);
begin
  MainMenu1.Items[0].Visible:= True;
  MainMenu1.Items[1].Visible:= False;
end;

function TForm1.Verifica_Pos: Integer;
var
  i: Integer;
begin
  for i := 0 to 99 do
  begin

    if Contatos[i].Status = True then
    begin

      Result:= i;
      break;

    end

  end;

  Result:= -1;

end;

function TForm1.Ver_Nome(Nome: string): Boolean;
var
  i: Integer;
begin
  for i := 0 to 99 do
  begin

    if Nome = Contatos[i].Nome then
    begin

      Result:= False;
      break;

    end
      else
        Result:= True

  end;
end;

procedure TForm1.Voltar1Click(Sender: TObject);
begin
  TS_Agenda.Show;
  Limpar();
end;

end.
