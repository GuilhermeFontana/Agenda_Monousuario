unit UntPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.ExtCtrls, Vcl.StdCtrls,
  Vcl.Grids, Vcl.Buttons, Vcl.Mask, Vcl.WinXCalendars;

type
  TForm1 = class(TForm)
    PageControl1: TPageControl;
    TS_Agenda: TTabSheet;
    StringGrid1: TStringGrid;
    Memo1: TMemo;
    BBtn_Cad: TBitBtn;
    BBtn_Editar: TBitBtn;
    BBtn_Del: TBitBtn;
    TS_Cadastro: TTabSheet;
    MaskEdit1: TMaskEdit;
    Label1: TLabel;
    LabeledEdit1: TLabeledEdit;
    LabeledEdit2: TLabeledEdit;
    LabeledEdit3: TLabeledEdit;
    Label2: TLabel;
    Memo2: TMemo;
    Label3: TLabel;
    BitBtn1: TBitBtn;
    Label4: TLabel;
    MaskEdit2: TMaskEdit;
    CalendarPicker1: TCalendarPicker;
    Label5: TLabel;
    ComboBox2: TComboBox;
    ComboBox3: TComboBox;
    Label6: TLabel;
    Label7: TLabel;
    MaskEdit3: TMaskEdit;
    Label8: TLabel;
    RadioGroup1: TRadioGroup;
    procedure TS_AgendaShow(Sender: TObject);
    procedure StringGrid1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);

    //
    function Verifica_Pos(): Integer;
    procedure BBtn_CadClick(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

  type
    Contato = record

      Nome: string [50];
      Data_Nascimento: TDate;
      Idade: Integer;
      Sexo: Integer;
      Celular: string[14];
      Fixo: string [13];
      Enfereço: string[200];
      Estado_Civil: Integer;
      Relacionamento: integer;
      E_Mail: string [25];
      Organização: string[20];
      Notas: string [200];

      Status: Boolean;

    end;
var
  Form1: TForm1;

  Contatos: array[0..999] of Contato;

  Arquivo: file of Contato;


implementation

{$R *.dfm}

procedure TForm1.BBtn_CadClick(Sender: TObject);
begin
  TS_Cadastro.Show;
end;

procedure TForm1.BitBtn1Click(Sender: TObject);
begin
  TS_Agenda.Show;
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
var
  i: Integer;
begin

  Rewrite(Arquivo);                                                             //apaga o arquivo

  for i := 0 to 99 do
  begin

    if Contatos[i].Status = True then
      Write(Arquivo, Contatos[i]);                                              //reescreve (salva) o arquivo

  end;

  CloseFile(Arquivo);

end;

procedure TForm1.FormCreate(Sender: TObject);                                   //criar o programa
var
  i: Integer;
begin

  for i := 0 to 99 do                                                           //zera a agenda
  begin

    Contatos[i].Status:= False;

  end;


  AssignFile(Arquivo, 'AgendaGui.Dat');                                         //vincula a variavel ao arquivo lido

  if FileExists ('AgendaGui.Dat') then                                          //verifica se o arquivo existe
    Reset(Arquivo)
  else
    Rewrite(Arquivo);

  Seek(Arquivo);                                                                //posiciona ponteiro no inicio do arquivo

  i:=0;
  while not(EOF(Arquivo)) do                                                    //até encontrar o fim do registro
  begin

    Read(Arquivo, Contatos[i]);                                                 //lê o arquivo

    Inc(i);

  end;


end;

procedure TForm1.StringGrid1Click(Sender: TObject);
var
  Aux1: string;
  i: Integer;
  Aux2: Integer;
begin

  if not(StringGrid1.Row = 0) then
  begin

    Aux1:= StringGrid1.Cells[1,StringGrid1.Row];

    for i := 0 to 99 do
    begin

      //if Aux1 = Contatos[i].Telefone then
        Aux2:= i;

    end;

    Memo1.Clear;
    Memo1.Lines.Add(Contatos[Aux2].Nome);                                       //nome

    Memo1.Lines.Add('');

    Memo1.Lines.Add('Celular: '+Contatos[Aux2].Celular);

    Memo1.Lines.Add('Fixo:'+Contatos[Aux2].Fixo);

    Memo1.Lines.Add('');

    Memo1.Lines.Add('Relacionamento: '+IntToStr(Contatos[Aux2].Relacionamento));

    Memo1.Lines.Add('');

    Memo1.Lines.Add('Organização: ');
    Memo1.Lines.Add(Contatos[Aux2].Organização);

    Memo1.Lines.Add('E-Mail:'+Contatos[Aux2].E_Mail);

    Memo1.Lines.Add('');

    Memo1.Lines.Add('Informações Pessoais');
    Memo1.Lines.Add('Data de Nascimento: '+DateToStr(Contatos[Aux2].Data_Nascimento));
    Memo1.Lines.Add('Sexo: '+IntToStr(Contatos[Aux2].Sexo));
    Memo1.Lines.Add('Estado Civil: '+IntToStr(Contatos[Aux2].Estado_Civil));
    Memo1.Lines.Add('Endereço: '+Contatos[Aux2].Enfereço);


    Memo1.Lines.Add('Notas:');
    Memo1.Lines.Add(Contatos[Aux2].Notas);

    BBtn_Editar.Enabled:= True;
    BBtn_Del.Enabled:= True;

  end;

end;

procedure TForm1.TS_AgendaShow(Sender: TObject);
begin
  StringGrid1.Cells[0,0]:= 'Nome';
  StringGrid1.Cells[1,0]:= 'Telefone';

  BBtn_Editar.Enabled:= False;
  BBtn_Del.Enabled:= False;



end;

function TForm1.Verifica_Pos: Integer;
var
  i: Integer;
begin
  for i := 0 to 99 do
  begin

    if Contatos[i].Status = True then
    begin

      Result:= i;
      break;

    end

  end;

  Result:= -1;

end;

end.
